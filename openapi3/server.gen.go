// Package notesapi_v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package notesapi_v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// Credentials defines model for Credentials.
type Credentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// Note defines model for Note.
type Note struct {
	Content string `json:"content"`
	Id      string `json:"id"`
	Title   string `json:"title"`
	UserId  string `json:"userId"`
}

// NotesList defines model for NotesList.
type NotesList struct {
	Notes []Note `json:"notes"`
}

// User defines model for User.
type User struct {
	Id       string `json:"id"`
	Password string `json:"password"`
	Username string `json:"username"`
}

// AuthLoginJSONRequestBody defines body for AuthLogin for application/json ContentType.
type AuthLoginJSONRequestBody = Credentials

// AuthRegisterJSONRequestBody defines body for AuthRegister for application/json ContentType.
type AuthRegisterJSONRequestBody = User

// NotesCreateNoteJSONRequestBody defines body for NotesCreateNote for application/json ContentType.
type NotesCreateNoteJSONRequestBody = Note

// NotesUpdateNoteJSONRequestBody defines body for NotesUpdateNote for application/json ContentType.
type NotesUpdateNoteJSONRequestBody = Note

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /auth/login)
	AuthLogin(ctx echo.Context) error

	// (POST /auth/register)
	AuthRegister(ctx echo.Context) error

	// (GET /notes)
	NotesListNotes(ctx echo.Context) error

	// (POST /notes)
	NotesCreateNote(ctx echo.Context) error

	// (DELETE /notes/{id})
	NotesDeleteNote(ctx echo.Context, id string) error

	// (GET /notes/{id})
	NotesGetNote(ctx echo.Context, id string) error

	// (PUT /notes/{id})
	NotesUpdateNote(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AuthLogin converts echo context to params.
func (w *ServerInterfaceWrapper) AuthLogin(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthLogin(ctx)
	return err
}

// AuthRegister converts echo context to params.
func (w *ServerInterfaceWrapper) AuthRegister(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AuthRegister(ctx)
	return err
}

// NotesListNotes converts echo context to params.
func (w *ServerInterfaceWrapper) NotesListNotes(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotesListNotes(ctx)
	return err
}

// NotesCreateNote converts echo context to params.
func (w *ServerInterfaceWrapper) NotesCreateNote(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotesCreateNote(ctx)
	return err
}

// NotesDeleteNote converts echo context to params.
func (w *ServerInterfaceWrapper) NotesDeleteNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotesDeleteNote(ctx, id)
	return err
}

// NotesGetNote converts echo context to params.
func (w *ServerInterfaceWrapper) NotesGetNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotesGetNote(ctx, id)
	return err
}

// NotesUpdateNote converts echo context to params.
func (w *ServerInterfaceWrapper) NotesUpdateNote(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.NotesUpdateNote(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/login", wrapper.AuthLogin)
	router.POST(baseURL+"/auth/register", wrapper.AuthRegister)
	router.GET(baseURL+"/notes", wrapper.NotesListNotes)
	router.POST(baseURL+"/notes", wrapper.NotesCreateNote)
	router.DELETE(baseURL+"/notes/:id", wrapper.NotesDeleteNote)
	router.GET(baseURL+"/notes/:id", wrapper.NotesGetNote)
	router.PUT(baseURL+"/notes/:id", wrapper.NotesUpdateNote)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTWvbQBD9K2ba4xKJ5qZbmkAJhFJKcwo5bLUTa4O0u50ZpRij/15217biWCJNiVNK",
	"byNpPt68t/vsNdS+C96hE4ZqDVw32OkUnhMadGJ1mx4D+YAkFvOTZv7pycRYVgGhAhaybgmDgp6RnO5w",
	"4uOggPBHbwkNVDdjpho73qptkf9+j7XEjp+94CGI2jtBJ5MY7DQ0sdLiLOhL8zxka2DbRu0Q7MrnwPOV",
	"ZTncwMVPMbCCXQreE95BBe+KUZdiI0qRWBh2EzSRXh3gyy2ncFwz0iGEGaJeSeDE1u+pHEutu/OpaZYp",
	"U7c4+3IJCh6Q2HoHFZQn5UkZcfiATgcLFZymV7G/NGmtQvfSFK1fWpd29pn+uLkW612UGs56aa5SSkaN",
	"LB+9WT05WzqE1tapqrhn78Z78pxgj6/QsE+NUI/pBQfvOEvxoSxfbXQSO800yDXZIJm7bw0uNqsuGs0L",
	"7usa0aA5idmD2hBHuLQsm/Myy93XbdZx6Bt3+Bd4293lJU7QtTOBFMARNxjt5sVrqBmtU8tzQi2YPOg4",
	"cmd7e1u5x5l/JHextmaIMwy2mH+iJpi7SB83zAVNukNBYqhu1hDtKbkWKMiWmj1znwL1aJ2nhns7Tc/L",
	"dJ8/s59Q3hj5XxRWQejniLgORh9Zxf/6Tg0KGOlhS+l+7QU+YOtDh04WOSv+r6AWKmhEQlUUra9123iW",
	"6rQsSxhuh18BAAD//33ju/HcCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
